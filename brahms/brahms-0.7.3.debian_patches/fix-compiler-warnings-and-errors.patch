Description: Fix various compiler warnings and errors
 A few fixes to ensure brahms compiles with gcc-4.7
Author: Seb James <seb.james@sheffield.ac.uk>
Forwarded: By email to Ben Mitchinson
Last-Update: 2014-02-20
--- a/components/std/util_rng.cpp
+++ b/components/std/util_rng.cpp
@@ -71,6 +71,7 @@
 
 public:
 
+	virtual ~RNG() {};
 	virtual void select(const char* distribution) = 0;
 	virtual void seed(const UINT32* seed, UINT32 count) = 0;
 	virtual void fill(DOUBLE* dst, UINT32 cnt, DOUBLE gain = 1.0, DOUBLE offset = 0.0) = 0;
--- a/framework/bindings/1258/matlab.cpp
+++ b/framework/bindings/1258/matlab.cpp
@@ -458,7 +458,7 @@
 	engineLocal = NULL;
 	mxOutput = NULL;
 	mxCount = 0;
-	ComponentVersion v = {-1, -1};
+	ComponentVersion v = {static_cast<UINT16>(-1), static_cast<UINT16>(-1)};
 	versionComponent = v;
 
 	//	lay in path information
--- a/framework/bindings/1262/python.cpp
+++ b/framework/bindings/1262/python.cpp
@@ -1622,7 +1622,7 @@
 
 COMPONENT_CLASS_CPP::COMPONENT_CLASS_CPP(EventModuleCreateBindings* emc)
 {
-	ComponentVersion v = {-1, -1};
+	ComponentVersion v = {static_cast<UINT16>(-1), static_cast<UINT16>(-1)};
 	versionComponent = v;
 
 	//	lay in path information
--- a/framework/channel/mpi.cpp
+++ b/framework/channel/mpi.cpp
@@ -169,7 +169,7 @@
 		
 		CommsInitData init(brahms::base::Core& p_core)
 		{
-			CommsInitData ret = {VOICE_UNDEFINED, 0};
+			CommsInitData ret = {static_cast<INT32>(VOICE_UNDEFINED), 0};
 
 			if (!core)
 			{
--- a/framework/engine/base/ipm.cpp
+++ b/framework/engine/base/ipm.cpp
@@ -87,7 +87,7 @@
 			//	no internal data
 			m_data = NULL;
 			m_block = NULL;
-			m_reserved = NULL;
+			m_reserved = 0;
 			m_size = 0;
 
 			//	has a callback
--- a/framework/engine/main/comm.cpp
+++ b/framework/engine/main/comm.cpp
@@ -138,9 +138,7 @@
 				}
 
 				//	init channel module
-				brahms::channel::CommsInitFunc* commsInitFunc = NULL;
 				brahms::channel::CreateChannelFunc* createChannelFunc = NULL;
-				brahms::channel::CommsInitData commsInitData = initChannelModule(engineData, voice.protocol, commsInitFunc, createChannelFunc);
 
 				//	have comms module create the channel
 				brahms::channel::ChannelInitData initData;
--- a/framework/engine/systemml/system.cpp
+++ b/framework/engine/systemml/system.cpp
@@ -1784,7 +1784,6 @@
 				//	initially, assume default log mode
 				INT32 precision = engineData.execution.defaultLogMode.precision;
 				bool encapsulated = engineData.execution.defaultLogMode.encapsulated;
-				bool recurse = engineData.execution.defaultLogMode.recurse;
 				vector<LogOriginSeconds> origins = engineData.execution.defaultLogMode.origins;
 
 				//	find best match amongst specific log modes
@@ -1825,7 +1824,6 @@
 					logRule.logged.push_back(processName + " (Process)"); // mark that this rule caused this item to log, for audit
 					precision = logRule.mode.precision;
 					encapsulated = logRule.mode.encapsulated;
-					recurse = logRule.mode.recurse;
 					origins = logRule.mode.origins;
 				}
 				else unloggedItems.push_back(processName + " (Process)");
@@ -1890,7 +1888,6 @@
 					INT32 precision = engineData.execution.defaultLogMode.precision;
 					bool encapsulated = engineData.execution.defaultLogMode.encapsulated;
 					vector<LogOriginSeconds> origins = engineData.execution.defaultLogMode.origins;
-					bool recurse = engineData.execution.defaultLogMode.recurse;
 
 					//	find best match amongst specific log modes
 					INT32 bestMatch = -1;
@@ -1932,7 +1929,6 @@
 						precision = logRule.mode.precision;
 						encapsulated = logRule.mode.encapsulated;
 						origins = logRule.mode.origins;
-						recurse = logRule.mode.recurse;
 					}
 					else unloggedItems.push_back(dataName);
 
